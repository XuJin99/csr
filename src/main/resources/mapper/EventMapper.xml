<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blockchain.csr.mapper.EventMapper">
  <resultMap id="BaseResultMap" type="com.blockchain.csr.model.entity.Event">
    <!--@mbg.generated-->
    <!--@Table event-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="start_time" jdbcType="TIMESTAMP" property="startTime" />
    <result column="end_time" jdbcType="TIMESTAMP" property="endTime" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="total_time" jdbcType="INTEGER" property="totalTime" />
    <result column="total_money" jdbcType="DECIMAL" property="totalMoney" />
    <result column="location" jdbcType="VARCHAR" property="location" />
    <result column="avatar" jdbcType="VARCHAR" property="avatar" />
    <result column="vendor_id" jdbcType="VARCHAR" property="vendorId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, `name`, description, start_time, end_time, created_at, total_time, total_money, 
    `location`, avatar, vendor_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from event
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from event
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.blockchain.csr.model.entity.Event">
    <!--@mbg.generated-->
    insert into event (id, `name`, description, 
      start_time, end_time, created_at, 
      total_time, total_money, `location`, 
      avatar, vendor_id)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{totalTime,jdbcType=INTEGER}, #{totalMoney,jdbcType=DECIMAL}, #{location,jdbcType=VARCHAR}, 
      #{avatar,jdbcType=VARCHAR}, #{vendorId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.blockchain.csr.model.entity.Event">
    <!--@mbg.generated-->
    insert into event
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="endTime != null">
        end_time,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="totalTime != null">
        total_time,
      </if>
      <if test="totalMoney != null">
        total_money,
      </if>
      <if test="location != null">
        `location`,
      </if>
      <if test="avatar != null">
        avatar,
      </if>
      <if test="vendorId != null">
        vendor_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="totalTime != null">
        #{totalTime,jdbcType=INTEGER},
      </if>
      <if test="totalMoney != null">
        #{totalMoney,jdbcType=DECIMAL},
      </if>
      <if test="location != null">
        #{location,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="vendorId != null">
        #{vendorId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.blockchain.csr.model.entity.Event">
    <!--@mbg.generated-->
    update event
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null">
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="totalTime != null">
        total_time = #{totalTime,jdbcType=INTEGER},
      </if>
      <if test="totalMoney != null">
        total_money = #{totalMoney,jdbcType=DECIMAL},
      </if>
      <if test="location != null">
        `location` = #{location,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        avatar = #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="vendorId != null">
        vendor_id = #{vendorId,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.blockchain.csr.model.entity.Event">
    <!--@mbg.generated-->
    update event
    set `name` = #{name,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      total_time = #{totalTime,jdbcType=INTEGER},
      total_money = #{totalMoney,jdbcType=DECIMAL},
      `location` = #{location,jdbcType=VARCHAR},
      avatar = #{avatar,jdbcType=VARCHAR},
      vendor_id = #{vendorId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>